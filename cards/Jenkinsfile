pipeline {
    agent any
    environment {
        REGISTRY = 'k8s-vga-worker1:5000'
        IMAGE_NAME = 'group1-team6-cha-card'
        IMAGE_TAG = 'latest'
        NAMESPACE = 'group1-team6'
        JAVA_HOME = '/tmp/jdk-21.0.5'
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
    }

    stages {
        stage('Checkout') {
            steps {
                // Git 저장소에서 소스 코드 체크아웃 (branch 지정 : 본인 repository의 branch 이름으로 설정)
                // git branch: 'main', url: 'https://github.com/chayeonhee/eureka.git'
                script {
                    // Git 레포지토리에서 cards 폴더만 체크아웃
                    checkout([$class: 'GitSCM',
                              branches: [[name: '*/main']],
                              extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'cards/']]]],
                              userRemoteConfigs: [[url: 'https://github.com/chayeonhee/msa.git']]])
                }
            }
        }

        stage('Build with Maven') {
            steps {
                script {
                    dir('cards') {
                        sh 'mvn clean package -DskipTests'
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    dir('cards') {
                        sh "docker build -t ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} ."
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    // Docker 이미지를 Registry Server에 푸시
                    sh "docker push ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }
        stage('Deploy and Service to Kubernetes') {
            steps {
                script {
                    dir('cards') {
                        // Kubernetes Deployment and Service 생성 및 적용 (1일차 교육때 사용한 deploy & service 생성 yaml 파일 등록하여 사용)
                        // sh "kubectl apply -f ./yaml/demo-app.yaml -n ${NAMESPACE}"
                        sh "kubectl apply -f ./yaml/cha-app.yaml -n ${NAMESPACE}"
                        // sh "kubectl rollout restart deployment/<deployment-name>"
                        // image tag 변경 없이 적용하려면 pod 재시작
                        sh "kubectl rollout restart deployment/card-pod-cha -n ${NAMESPACE}"
                    }
                }
            }
        }
        stage('Deployment Image to Update') {
            steps {
                script {
                    // Kubenetes에서 특정 Deployment의 컨테이너 이미지를 업데이트 (아래 이름은 중복되지 않게 주의하여 지정, deployment, selector 이름으로)
                    sh "kubectl set image deployment/card-pod-cha card-contain-cha=${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} --namespace=${NAMESPACE}"
                }
            }
        }
    }
}
