pipeline {
    agent any
    environment {
        REGISTRY = 'k8s-vga-worker1:5000'
        IMAGE_NAME = 'group1-team6-cha-acc'
        IMAGE_TAG = 'latest'
        NAMESPACE = 'group1-team6'
        JAVA_HOME = '/tmp/jdk-21.0.5'
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
        HELM_CHART_PATH="./eazybank-services/accounts/helm-chart"
        COMMON_HELM_CHART_PATH="./eazybank-common"
        GLOBAL_HELM_CHART_PATH="./environments/prod-env"
    }
    stages {
        stage('Checkout') {
            steps {
                // Git 저장소에서 소스 코드 체크아웃 (branch 지정 : 본인 repository의 branch 이름으로 설정)
                git branch: 'main', url: 'https://github.com/chayeonhee/msa2.git'
                // script {
                //     // Git 레포지토리에서 cards 폴더만 체크아웃
                //     checkout([$class: 'GitSCM',
                //               branches: [[name: '*/main']],
                //               extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: '/']]]],
                //               userRemoteConfigs: [[url: 'https://github.com/chayeonhee/msa2.git']]])
                // }
            }
        }
        // stage('Build with Maven') {
        //     steps {
        //         script {
        //             dir('accounts') {
        //                 sh 'mvn clean package -DskipTests'
        //             }
        //         }
        //     }
        // }
        // stage('Build Docker Image') {
        //     steps {
        //         script {
        //             dir('accounts') {
        //                 sh "docker build -t ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} ."
        //             }
        //         }
        //     }
        // }
        // stage('Push Docker Image') {
        //     steps {
        //         script {
        //             // Docker 이미지를 Registry Server에 푸시
        //             sh "docker push ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
        //         }
        //     }
        // }
        // stage('Deploy and Service to Kubernetes') {
        //     steps {
        //         script {
        //             dir('accounts') {
        //                 sh "kubectl delete -f ./yaml/cha-app.yaml -n ${NAMESPACE} | true"
        //                 sh "kubectl apply -f ./yaml/cha-app.yaml -n ${NAMESPACE}"
        //                 // sh "kubectl rollout restart deployment/<deployment-name>"
        //                 // image tag 변경 없이 적용하려면 pod 재시작
        //                 // sh "kubectl rollout restart deployment/account-dep-cha -n ${NAMESPACE}"
        //             }
        //         }
        //     }
        // }
        // stage('Deploy and Service to Kubernetes') {
        //     steps {
        //         sh "kubectl apply -f eazybank-common/templates/configmap.yaml -n ${NAMESPACE}"
        //     }
        // }
         stage('Helm Dependency Update') {
            steps {
                // sh "helm dependency update ${GLOBAL_HELM_CHART_PATH}"
                // sh "helm dependency build ${GLOBAL_HELM_CHART_PATH}"
                //Chart.yaml이 있는 디렉토리에서 실행
                sh "helm dependency update ${HELM_CHART_PATH}"
                sh "helm dependency build ${HELM_CHART_PATH}"
                
                
                sh "helm template team6-cha-account-helm ${HELM_CHART_PATH} -f ${GLOBAL_HELM_CHART_PATH}/values.yaml  -f ${COMMON_HELM_CHART_PATH}/values.yaml --namespace ${NAMESPACE} --debug"
            }
        }
         stage('HELM Deploy and Service to Kubernetes') {
            steps {
                script {
                        sh "helm upgrade --install team6-cha-account-helm ${HELM_CHART_PATH} --namespace ${NAMESPACE} -f ${GLOBAL_HELM_CHART_PATH}/values.yaml -f ${COMMON_HELM_CHART_PATH}/values.yaml --wait"
                }
            }
        }
        // stage('Deployment Image to Update') {
        //     steps {
        //         script {
        //             // Kubenetes에서 특정 Deployment의 컨테이너 이미지를 업데이트 (아래 이름은 중복되지 않게 주의하여 지정, deployment, selector 이름으로)
        //             sh "kubectl set image deployment/account-pod-cha account-contain-cha=${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} --namespace=${NAMESPACE}"
        //         }
        //     }
        // }
    }
}
